class Scene_Item < Scene_ItemBase
  def start
    super
    create_help_window
    create_category_window
    create_item_window
    create_actor_window
    create_status_overlay_window
    @category_window.activate
    @item_window.select_last
  end
  
  def create_status_overlay_window
    @status_overlay_window = Window_StatusOverlay.new
    @status_overlay_window.viewport = @viewport
    @status_overlay_window.hide
    @selected_item = nil # To store the currently selected item
  end
  
  def create_help_window
    @help_window = Window_Help.new(6)  # 6 lines for the help window
    @help_window.viewport = @viewport
    @help_window.z = 200
    @help_window.opacity = 255
  end

  def create_category_window
    wy = @help_window.height
    @category_window = Window_ItemCategory.new
    @category_window.viewport = @viewport
    @category_window.help_window = @help_window
    @category_window.set_handler(:ok, method(:on_category_ok))
    @category_window.set_handler(:cancel, method(:return_scene))
    @category_window.y = wy
    @category_window.activate
  end

  def create_item_window
    wy = @category_window.y + @category_window.height
    wh = Graphics.height - wy
    @item_window = Window_ItemList.new(0, wy, Graphics.width, wh)
    @item_window.viewport = @viewport
    @item_window.help_window = @help_window
    @item_window.set_handler(:ok, method(:on_item_confirm))
    @item_window.set_handler(:cancel, method(:on_item_cancel))
    @item_window.refresh
  end

  def create_actor_window
    @actor_window = Window_MenuActor.new
    @actor_window.viewport = @viewport
    @actor_window.z = 250
    @actor_window.opacity = 255
    @actor_window.hide
  end

  def on_category_ok
    @item_window.set_category(@category_window.current_symbol)
    @item_window.activate
    @item_window.select_last
  end

  def on_item_confirm
    @selected_item = @item_window.item # Store the selected item
    if item_usable?(@selected_item)
      @status_overlay_window.show_status($game_party.menu_actor, @selected_item)
      @item_window.set_handler(:ok, method(:use_item))
      @item_window.set_handler(:cancel, method(:on_item_cancel))
      @item_window.activate
    else
      Sound.play_buzzer
      @item_window.activate
    end
  end

  def on_item_cancel
    @selected_item = nil # Clear the selected item
    @status_overlay_window.hide
    @item_window.unselect
    @item_window.set_handler(:ok, method(:on_item_confirm))
    @category_window.activate
  end

  def use_item
    if @selected_item # Use the stored item
      Sound.play_use_item
      $game_party.last_item.object = @selected_item
      determine_item(@selected_item)
      @item_window.redraw_current_item
      on_item_cancel # Return to item selection after using the item
    end
  end

  def item_usable?(item)
    user = $game_party.menu_actor
    user && user.usable?(item)
  end

  def determine_item(item)
    user = $game_party.menu_actor
    apply_item_effects(user, item)
  end

  def apply_item_effects(user, item)
    user.item_apply(user, item)
    ItemMHPIncrease.apply_mhp_increase(item)

    if item.is_a?(RPG::Item) && item.itype_id == 1
      $game_party.lose_item(item, 1) # Ensure item is only consumed once
    end

    @actor_window.refresh
    @item_window.refresh
    check_common_event
    check_gameover
  end
end

class Window_ItemList < Window_Selectable
  def initialize(x, y, width, height)
    super(x, y, width, height)
    @category = :item
    @data = []
    refresh
  end

  def col_max
    return 3
  end

  def spacing
    return 8
  end

  def draw_item(index)
    item = @data[index]
    if item
      rect = item_rect(index)
      draw_item_name(item, rect.x, rect.y, enable?(item))
      draw_item_number(rect, item) if item.is_a?(RPG::Item)
    end
  end

  def item_max
    @data ? @data.size : 1
  end

  def item
    @data && index >= 0 ? @data[index] : nil
  end

  def set_category(category)
    @category = category
    refresh
  end

  def make_item_list
    @data = $game_party.all_items.select { |item| include?(item) }
  end

  def include?(item)
    case @category
    when :item
      item.is_a?(RPG::Item)
    when :weapon
      item.is_a?(RPG::Weapon)
    when :armor
      item.is_a?(RPG::Armor)
    when :key_item
      item.is_a?(RPG::Item) && item.key_item?
    else
      false
    end
  end

  def draw_item_number(rect, item)
    draw_text(rect, sprintf(":%2d", $game_party.item_number(item)), 2)
  end

  def refresh
    make_item_list
    create_contents
    draw_all_items
  end

  def select_last
    select($game_party.last_item.object ? $game_party.all_items.index($game_party.last_item.object) : 0)
  end

  def update_help
    @help_window.set_item(item)
  end
end

class Window_Help < Window_Base
  def initialize(line_number = 6)  # 6 lines for the help window
    height = fitting_height(line_number)
    super(0, 0, Graphics.width, height)
  end

  def set_item(item)
    set_text(item ? format_description(item.description, item.note) : "")
  end

  def format_description(description, note)
    memo_addition = ""
    note.scan(/\{([^}]*)\}/).each do |match|
      memo_addition += " " + match[0]
    end
    return (description + memo_addition).strip
  end
end

class Window_StatusOverlay < Window_Base
  def initialize
    super(Graphics.width - 300, 0, 300, fitting_height(6)) # Adjusted size and position
    self.z = 300
    self.opacity = 255
    hide
  end

  def show_status(actor, item)
    contents.clear
    draw_actor_simple_status(actor, 0, 0)
    draw_text(0, line_height * 4, contents_width, line_height, "Using: #{item.name}", 1)
    show
    open
  end

  def hide
    super
    close
  end
end

class Window_ItemCategory < Window_HorzCommand
  def initialize
    super(0, 0)
  end

  def window_width
    Graphics.width
  end

  def col_max
    return 4
  end

  def make_command_list
    add_command(Vocab::item,    :item)
    add_command(Vocab::weapon,  :weapon)
    add_command(Vocab::armor,   :armor)
    add_command(Vocab::key_item,:key_item)
  end
end
