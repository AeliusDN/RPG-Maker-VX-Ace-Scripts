=begin
This scrip introduces a new leveling system via predetermined stats for each
"level milestone". It then interpolates those stat milestones to fill the gaps.
This script also allows player stats to increase beyond their default maximum,
(as well as their level). It also works to allow players to increase their stats
even further through "bonus" stats, which are given through items with these
notetags:
      mhp: <IncreaseMHP:x>,
      mmp: <IncreaseMMP:x>,
      atk: <IncreaseATK:x>,
      def: <IncreaseDEF:x>,
      mag: <IncreaseMAG:x>,
      mdf: <IncreaseMDF:x>,
      agi: <IncreaseAGI:x>,
      luk: <IncreaseLUK:x>
On top of that, the script gives extra stat leeway so that even when the player
is max level and has max bonus stats, they can still receive the stat bonuses
from equipment. You have to add this notetag to the equipment though:
      <EquipBonus: MHP, MMP, ATK, DEF, MAG, MDF, AGI, LUK>
      Example: <EquipBonus: MHP+10, ATK+100, etc...>
=end

module MLV_CHANGE
  LVDRW  = 8

  MANUAL_STAT_INTERVAL = 50

  MANUAL_STAT_SETTINGS = {
    1 => { :mhp => 2000, :mmp => 500, :atk => 100, :def => 100, :mag => 100, :mdf => 100, :agi => 100, :luk => 100 },
    50 => { :mhp => 10000, :mmp => 1000, :atk => 500, :def => 500, :mag => 500, :mdf => 500, :agi => 500, :luk => 500 },
    100 => { :mhp => 25000, :mmp => 5000, :atk => 650, :def => 650, :mag => 650, :mdf => 650, :agi => 650, :luk => 650 },
    150 => { :mhp => 40000, :mmp => 12500, :atk => 800, :def => 800, :mag => 800, :mdf => 800, :agi => 800, :luk => 800 },
    200 => { :mhp => 60000, :mmp => 20000, :atk => 1000, :def => 1000, :mag => 1000, :mdf => 1000, :agi => 1000, :luk => 1000 },
    250 => { :mhp => 80000, :mmp => 30000, :atk => 1200, :def => 1200, :mag => 1200, :mdf => 1200, :agi => 1200, :luk => 1200 },
    300 => { :mhp => 105000, :mmp => 40000, :atk => 1450, :def => 1450, :mag => 1450, :mdf => 1450, :agi => 1450, :luk => 1450 },
    350 => { :mhp => 130000, :mmp => 52500, :atk => 1700, :def => 1700, :mag => 1700, :mdf => 1700, :agi => 1700, :luk => 1700 },
    400 => { :mhp => 160000, :mmp => 65000, :atk => 2000, :def => 2000, :mag => 2000, :mdf => 2000, :agi => 2000, :luk => 2000 },
    450 => { :mhp => 190000, :mmp => 80000, :atk => 2300, :def => 2300, :mag => 2300, :mdf => 2300, :agi => 2300, :luk => 2300 },
    500 => { :mhp => 225000, :mmp => 95000, :atk => 2650, :def => 2650, :mag => 2650, :mdf => 2650, :agi => 2650, :luk => 2650 },
    550 => { :mhp => 260000, :mmp => 112500, :atk => 3000, :def => 3000, :mag => 3000, :mdf => 3000, :agi => 3000, :luk => 3000 },
    600 => { :mhp => 300000, :mmp => 130000, :atk => 3400, :def => 3400, :mag => 3400, :mdf => 3400, :agi => 3400, :luk => 3400 },
    650 => { :mhp => 340000, :mmp => 150000, :atk => 3800, :def => 3800, :mag => 3800, :mdf => 3800, :agi => 3800, :luk => 3800 },
    700 => { :mhp => 385000, :mmp => 170000, :atk => 4250, :def => 4250, :mag => 4250, :mdf => 4250, :agi => 4250, :luk => 4250 },
    750 => { :mhp => 430000, :mmp => 192500, :atk => 4700, :def => 4700, :mag => 4700, :mdf => 4700, :agi => 4700, :luk => 4700 },
    800 => { :mhp => 480000, :mmp => 215000, :atk => 5200, :def => 5200, :mag => 5200, :mdf => 5200, :agi => 5200, :luk => 5200 },
    850 => { :mhp => 530000, :mmp => 240000, :atk => 5700, :def => 5700, :mag => 5700, :mdf => 5700, :agi => 5700, :luk => 5700 },
    900 => { :mhp => 585000, :mmp => 265000, :atk => 6250, :def => 6250, :mag => 6250, :mdf => 6250, :agi => 6250, :luk => 6250 },
    950 => { :mhp => 640000, :mmp => 292500, :atk => 6800, :def => 6800, :mag => 6800, :mdf => 6800, :agi => 6800, :luk => 6800 },
    1000 => { :mhp => 700000, :mmp => 325000, :atk => 7000, :def => 7000, :mag => 7000, :mdf => 7000, :agi => 7000, :luk => 7000 }
  }

  TAG_MANUAL_STAT_GROWTH = "<ManualStatGrowth>"
  TAG_MAX_LEVEL_INCREASE = /<MaxLevelIncrease:\s*(\d+)>/
end

class RPG::BaseItem
  def mlv_plus
    @mlv_plus ||= begin
      value = 0
      self.note.scan(MLV_CHANGE::TAG_MAX_LEVEL_INCREASE).each do |match|
        value += match[0].to_i
      end
      value
    end
  end
end

class RPG::Class < RPG::BaseItem
  def manual_stat_growth?
    self.note.include?(MLV_CHANGE::TAG_MANUAL_STAT_GROWTH)
  end
end

class Game_BattlerBase
  def param_max(param_id)
    case param_id
    when 0  # MHP
      return 2000000  # Maximum HP
    when 1  # MMP
      return 1000000   # Maximum MP
    when 2..7
      return 20000    # Maximum other stats
    else
      return 20000    # Default maximum
    end
  end
end

class Game_Actor < Game_Battler
  
  # Define max bonuses for each stat
  MAX_BONUS = {
    mhp: 300000, # Max bonus MHP
    mmp: 175000, # Max bonus MMP
    atk: 3000,   # Max bonus ATK
    def: 3000,   # Max bonus DEF
    mag: 3000,   # Max bonus MAG
    mdf: 3000,   # Max bonus MDF
    agi: 3000,   # Max bonus AGI
    luk: 3000    # Max bonus LUK
  }
  
   def stat_id_to_symbol(param_id)
    case param_id
    when 0 then :mhp
    when 1 then :mmp
    when 2 then :atk
    when 3 then :def
    when 4 then :mag
    when 5 then :mdf
    when 6 then :agi
    when 7 then :luk
    else nil
    end
  end

  # Add or increase bonus to any stat
  def add_bonus_param(param_id, value)
    stat_symbol = stat_id_to_symbol(param_id)
    return if stat_symbol.nil?

    max_bonus = MAX_BONUS[stat_symbol]
    @bonus_params ||= {}
    @bonus_params[stat_symbol] = (@bonus_params[stat_symbol] || 0) + value
    @bonus_params[stat_symbol] = [@bonus_params[stat_symbol], max_bonus].min # Clamp to max bonus

    refresh # Ensure stats are updated after the change
    p "Debug: Added #{value} to #{stat_symbol.upcase}. New bonus: #{@bonus_params[stat_symbol]}"
  end

  # Override the param_plus method to include the bonus for each stat
  alias_method :param_plus_with_bonus, :param_plus
  def param_plus(param_id)
    bonus = param_plus_with_bonus(param_id)
    stat_symbol = stat_id_to_symbol(param_id)
    if stat_symbol && @bonus_params
      bonus += @bonus_params[stat_symbol].to_i
      p "Debug: #{stat_symbol.upcase} after adding bonus: #{bonus} (Base: #{param_plus_with_bonus(param_id)}, Bonus: #{@bonus_params[stat_symbol]})"
    end
    bonus
  end

  # Override the param_max method to ensure it accounts for the bonus for each stat
  alias_method :param_max_with_bonus, :param_max
  def param_max(param_id)
    max_value = super(param_id)
    stat_symbol = stat_id_to_symbol(param_id)
    if stat_symbol && @bonus_params
      max_value += @bonus_params[stat_symbol].to_i
      p "Debug: Max #{stat_symbol.upcase}: #{max_value} (Base Max: #{super(param_id)}, Bonus: #{@bonus_params[stat_symbol]})"
    end
    max_value
  end

  def equip_stat_bonus(param_id)
    bonus = 0
    equips.each do |item|
      next if item.nil?
      item.note.scan(/<EquipBonus:\s*(.*?)>/).each do |match|
        bonuses = match[0].split(',')
        bonuses.each do |bonus_string|
          stat, value = bonus_string.strip.split('+')
          case stat
          when 'MHP'
            bonus += value.to_i if param_id == 0
          when 'MMP'
            bonus += value.to_i if param_id == 1
          when 'ATK'
            bonus += value.to_i if param_id == 2
          when 'DEF'
            bonus += value.to_i if param_id == 3
          when 'MAG'
            bonus += value.to_i if param_id == 4
          when 'MDF'
            bonus += value.to_i if param_id == 5
          when 'AGI'
            bonus += value.to_i if param_id == 6
          when 'LUK'
            bonus += value.to_i if param_id == 7
          end
        end
      end
    end
    #puts "Debug: Equip Bonus for Param #{param_id} (#{stat_id_to_symbol(param_id).upcase}): #{bonus}"
    bonus
  end

  alias_method :param_base_lb, :param_base
  def param_base(param_id)
    if actor_class_has_manual_stat_growth?
      if MLV_CHANGE::MANUAL_STAT_SETTINGS.keys.include?(@level)
        manual_stat_value = apply_manual_stat_settings(param_id)
      else
        manual_stat_value = interpolate_stats(param_id)
      end
      return apply_clamp(manual_stat_value, 1, param_max(param_id))
    end

    return apply_clamp(param_base_lb(param_id), 1, param_max(param_id))
  end

  alias_method :max_level_lb, :max_level
  def max_level
    base_max_level = max_level_lb
    total_max_level = base_max_level + level_bonus
    total_max_level
  end

  def level_bonus
    bonus = 0
    feature_objects.each do |obj|
      bonus += obj.mlv_plus
    end
    bonus || 0
  end

  def actor_class_has_manual_stat_growth?
    self.class.manual_stat_growth?
  end

  def apply_manual_stat_settings(param_id)
    settings = MLV_CHANGE::MANUAL_STAT_SETTINGS[@level]
    return settings[stat_id_to_symbol(param_id)] if settings && stat_id_to_symbol(param_id)
    param_base_lb(param_id)
  end

  def interpolate_stats(param_id)
    prev_level, next_level = find_adjacent_levels(@level)
    return param_base_lb(param_id) if prev_level.nil? || next_level.nil?

    prev_stats = MLV_CHANGE::MANUAL_STAT_SETTINGS[prev_level]
    next_stats = MLV_CHANGE::MANUAL_STAT_SETTINGS[next_level]

    stat_symbol = stat_id_to_symbol(param_id)
    return param_base_lb(param_id) if stat_symbol.nil?

    prev_value = prev_stats[stat_symbol]
    next_value = next_stats[stat_symbol]

    total_levels = next_level - prev_level
    if total_levels <= 0
      return prev_value # Fallback to prevent errors
    end

    levels_passed = @level - prev_level
    ratio = levels_passed.to_f / total_levels

    interpolated_value = prev_value + (next_value - prev_value) * ratio
    interpolated_value.to_i
  end

  def find_adjacent_levels(level)
    levels = MLV_CHANGE::MANUAL_STAT_SETTINGS.keys.sort
    prev_level = levels.select { |lvl| lvl <= level }.max
    next_level = levels.select { |lvl| lvl >= level }.min

    return prev_level, next_level
  end

  def apply_clamp(value, min, max)
    [[value, max].min, min].max
  end
end

if MLV_CHANGE::LVDRW > 0
  class Window_Base < Window
    def draw_actor_level(actor, x, y)
      change_color(system_color)
      draw_text(x, y, 32, line_height, Vocab::level_a)
      change_color(normal_color)
      draw_text(x + 32 - MLV_CHANGE::LVDRW, y, 24 + MLV_CHANGE::LVDRW, line_height, actor.level, 2)
    end
  end
end

module ItemStatIncrease
  def self.apply_stat_increase(item)
    return if item.nil? || item.note.nil?

    stat_increases = {
      mhp: /<IncreaseMHP:\s*(\d+)>/,
      mmp: /<IncreaseMMP:\s*(\d+)>/,
      atk: /<IncreaseATK:\s*(\d+)>/,
      def: /<IncreaseDEF:\s*(\d+)>/,
      mag: /<IncreaseMAG:\s*(\d+)>/,
      mdf: /<IncreaseMDF:\s*(\d+)>/,
      agi: /<IncreaseAGI:\s*(\d+)>/,
      luk: /<IncreaseLUK:\s*(\d+)>/
    }

    $game_party.members.each do |actor|
      next unless actor.hp > 0 # Ensure actor is alive
      stat_increases.each do |stat, regex|
        if item.note =~ regex
          value = $1.to_i
          param_id = case stat
                     when :mhp then 0
                     when :mmp then 1
                     when :atk then 2
                     when :def then 3
                     when :mag then 4
                     when :mdf then 5
                     when :agi then 6
                     when :luk then 7
                     end
          actor.add_bonus_param(param_id, value)
          actor.refresh
        end
      end
    end
  end
end
