#==============================================================================
# **Bleed and Hemorrage Effects
#------------------------------------------------------------------------------
# Applies a bleed count meter to each enemy which fills when attacks labelled
# "Bleed" hit. This meter can be filled up to 5 times with separate states.
#==============================================================================
# Insert "<Bleed>" notetag into memo field of an attack to fill bleed meter.
#==============================================================================
# **Game_Enemy
#==============================================================================
class Game_Enemy < Game_Battler
  attr_accessor :bleed_count, :bleed_stack
  BLEED_STATE_IDS = [339, 320, 341, 342, 343] # Replace with the IDs of the states for each stack level

  alias initialize_bleed initialize
  def initialize(index, enemy_id)
    initialize_bleed(index, enemy_id)
    @bleed_count = 0
    @bleed_stack = 0
    #puts "Initialized Game_Enemy with bleed_count #{@bleed_count} and bleed_stack #{@bleed_stack}"
  end

  def add_bleed
    @bleed_count += 1
    #puts "Bleed count for #{self.name} increased to #{@bleed_count}"
    if @bleed_count >= 5
      @bleed_stack += 1
      apply_bleed_effect
      @bleed_count = 0 # Reset bleed count but keep stack
    end
  end

  def apply_bleed_effect
    remove_all_bleed_states
    state_id = BLEED_STATE_IDS[[@bleed_stack - 1, 4].min] # Get the state ID based on the current stack
    add_state(state_id)
    #puts "Applied state #{state_id} to #{self.name} with bleed_stack #{@bleed_stack}"
  end

  def remove_all_bleed_states
    BLEED_STATE_IDS.each { |state_id| remove_state(state_id) }
    #puts "Removed all bleed states from #{self.name}"
  end
end

#==============================================================================
# **Game_Battler
#==============================================================================
class Game_Battler < Game_BattlerBase
  alias item_apply_bleed item_apply
  def item_apply(user, item)
    item_apply_bleed(user, item)
    if item.note.include?("<Bleed>")
      #puts "Bleed note found in item: #{item.name}"
      if self.is_a?(Game_Enemy)
        self.add_bleed
      end
    else
      #puts "No bleed note found in item: #{item.name}"
    end
  end
end

#==============================================================================
# **Window_BeedMeter
#==============================================================================
class Window_BleedMeter < Window_Base
  BLEED_BAR_THICKNESS = 25  # Adjust this value to change the thickness of the bleed bar
  BLEED_LABEL_WIDTH = 100   # Adjust this value to change the width of the bleed label
  BLEED_LABEL_HEIGHT = 24   # Height of the label area

  def initialize(x, y, enemy)
    width = [BLEED_BAR_THICKNESS + 10, BLEED_LABEL_WIDTH].max  # Adjusted for padding
    height = 140  # Height to accommodate both the label and the bar
    super(x, y, width, height)
    @enemy = enemy
    self.opacity = 0  # Set window opacity to 0 to make the background invisible
    self.z = -0  # Ensure the window is under other windows
    refresh
  end

  def refresh
    contents.clear
    draw_bleed_label
    draw_bleed_meter(5, BLEED_LABEL_HEIGHT + 5, BLEED_BAR_THICKNESS, contents_height - BLEED_LABEL_HEIGHT - 10, @enemy.bleed_count)
  end

  def draw_bleed_label
    contents.draw_text(5, 95, BLEED_LABEL_WIDTH, BLEED_LABEL_HEIGHT, "Bleed", 1)  # Center-aligned text
  end

  def draw_bleed_meter(x, y, width, height, bleed_count)
    fill_height = height * bleed_count / 5.0  # Adjusted to match the bleed count scale
    fill_y = height - fill_height
    red_color = Color.new(150, 0, 0)
    contents.fill_rect(x, y + fill_y, width, fill_height, red_color)
    #puts "Drew bleed meter with bleed_count #{bleed_count} for enemy #{@enemy.name}"
  end
end

#==============================================================================
# **Sprite_BleedOutline
#==============================================================================
class Sprite_BleedOutline < Sprite
  def initialize(viewport, x, y)
    super(viewport)
    self.bitmap = Cache.picture("BleedOutline")
    self.x = 12
    self.y = 300
    self.z = 0  # Ensure the outline is under other windows but over the bleed meter
  end
end

#==============================================================================
# **Scene_Battle
#==============================================================================
class Scene_Battle < Scene_Base
  alias start_bleed start
  def start
    start_bleed
    create_bleed_meters
  end

  alias terminate_bleed terminate
  def terminate
    dispose_bleed_meters
    terminate_bleed
  end

  def create_bleed_meters
    @bleed_meters = []
    @bleed_meter_windows = []
    @bleed_outlines = []
    $game_troop.members.each_with_index do |enemy, index|
      x = 0 + index * 60  # Adjust spacing as needed
      y = Graphics.height - 225
      bleed_meter = Window_BleedMeter.new(x, y, enemy)
      bleed_outline = Sprite_BleedOutline.new(nil, x - 5, y + 24)  # Adjust these coordinates to position the outline correctly
      @bleed_meters.push(bleed_meter)
      @bleed_outlines.push(bleed_outline)
      add_bleed_meter_window(bleed_meter)
      add_bleed_outline_sprite(bleed_outline)
    end
  end

  def dispose_bleed_meters
    @bleed_meters.each(&:dispose)
    @bleed_meter_windows.each(&:dispose)
    @bleed_outlines.each(&:dispose)
  end

  alias update_bleed update
  def update
    update_bleed
    @bleed_meters.each(&:refresh)
  end

  def add_bleed_meter_window(window)
    @bleed_meter_windows ||= []
    @bleed_meter_windows.push(window)
    @window ||= []
    @window.push(window)
  end

  def add_bleed_outline_sprite(sprite)
    @sprites ||= []
    @sprites.push(sprite)
  end
end
